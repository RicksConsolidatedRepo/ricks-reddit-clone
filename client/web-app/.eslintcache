[{"C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\reportWebVitals.js":"1","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\App.js":"2","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\CreatePost.jsx":"3","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\NavBar.jsx":"4","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\PostComments.jsx":"5","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\SubredditList.jsx":"6","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\SubredditPosts.jsx":"7","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\ViewPost.jsx":"8","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\index.js":"9"},{"size":362,"mtime":1607319201845,"results":"10","hashOfConfig":"11"},{"size":1467,"mtime":1607397309102,"results":"12","hashOfConfig":"11"},{"size":6392,"mtime":1607397388237,"results":"13","hashOfConfig":"11"},{"size":2628,"mtime":1607397512925,"results":"14","hashOfConfig":"11"},{"size":3291,"mtime":1607397591043,"results":"15","hashOfConfig":"11"},{"size":3557,"mtime":1607397764766,"results":"16","hashOfConfig":"11"},{"size":2590,"mtime":1607397829825,"results":"17","hashOfConfig":"11"},{"size":6517,"mtime":1607397887330,"results":"18","hashOfConfig":"11"},{"size":500,"mtime":1607319201845,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"19x8gnq",{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\reportWebVitals.js",[],["42","43"],"C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\App.js",["44","45","46","47","48","49"],"import React, {\n  Component\n} from 'react'\nimport './App.css'\nimport NavBar from './components/NavBar';\nimport CreateSubreddit from './components/CreatePost';\nimport ViewPost from './components/ViewPost';\nimport PostComment from './components/PostComments'\nimport SubredditPosts from './components/SubredditPosts';\nimport SubredditList from './components/SubredditList';\nimport {\n  library\n} from '@fortawesome/fontawesome-svg-core';\nimport {\n  FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\nimport {\n  faStroopwafel\n} from '@fortawesome/free-solid-svg-icons';\n\n\n\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subredditList: [],\n      myCallback: (dataFromChild) => {\n        console.log(dataFromChild);\n        this.state.subredditList.push(dataFromChild);\n      }\n    };\n    library.add(faStroopwafel);\n\n    //this.myCallback = this.myCallback.bind(this);\n    this.loadSubredditList = this.loadSubredditList.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadSubredditList();\n  }\n\n  loadSubredditList() {\n    axios.get('http://localhost:8080/r')\n      .then(res => {\n        this.setState({\n          subredditList: res.data\n        });\n        console.log(this.state.subredditList);\n      });\n  }\n\n  render() {\n\n    return ( <\n      div > < SubredditList subredditList = {\n        this.state.subredditList\n      }\n      / > < /\n      div >\n    );\n  }\n}\n\nexport default App","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\CreatePost.jsx",["50","51","52","53","54","55","56","57"],"C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\NavBar.jsx",["58","59"],"C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\PostComments.jsx",["60","61"],"C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\SubredditList.jsx",["62","63"],"C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\SubredditPosts.jsx",["64","65"],"import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport App from \"../App\";\r\nimport ViewPost from \"./ViewPost\";\r\n\r\nconst widthOfCards = {\r\n  width: \"60%\",\r\n  margin: \"0 auto\"\r\n};\r\n\r\nconst fStyle = {\r\n  marginBottom: \"40px\"\r\n};\r\n\r\nclass SubredditPosts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subredditPostsList: [],\r\n      postId: null\r\n    };\r\n\r\n    this.loadSubredditPosts = this.loadSubredditPosts.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.loadSubredditPosts();\r\n  }\r\n\r\n  loadSubredditPosts() {\r\n    axios\r\n      .get(\r\n        \"http://localhost:8080/post/by_subredditId/\" + this.props.selectSub.id\r\n      )\r\n      .then(res => {\r\n        this.setState({ subredditPostsList: res.data });\r\n        console.log(this.state.subredditPostsList);\r\n      });\r\n  }\r\n\r\n  postClick(e, data) {\r\n    this.setState({\r\n      postId: data._id\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.postId == null) return this.ViewPostList();\r\n    else if (this.state.postId != null)\r\n      return (\r\n        <div>\r\n          <ViewPost postId={this.state.postId} />\r\n          {console.log(this.state.postId)}\r\n        </div>\r\n      );\r\n    else return <div>loading</div>;\r\n  }\r\n\r\n  ViewPostList() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"title is-1\">{this.props.selectSub.name}</h1>\r\n        <div style={widthOfCards}>\r\n          {this.state.subredditPostsList.map(post => (\r\n            <div\r\n              onClick={e => this.postClick(e, post)}\r\n              style={fStyle}\r\n              className=\"card is-centered\"\r\n              key={post._id}\r\n            >\r\n              <div className=\"card-content\">\r\n                <div className=\"media\">\r\n                  <div className=\"media-left\">\r\n                    <figure className=\"image is-48x48\">\r\n                      <img\r\n                        src=\"https://bulma.io/images/placeholders/96x96.png\"\r\n                        alt=\"Placeholder image\"\r\n                      />\r\n                    </figure>\r\n                  </div>\r\n                  <div className=\"media-content\">\r\n                    <span key={post._id}>Posted by Darren 12 hours ago</span>\r\n                    <p key={post.title}>{post.title}</p>\r\n                    <div key={post.description} className=\"content\">\r\n                      {post.description}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubredditPosts;\r\n","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\components\\ViewPost.jsx",["66","67","68"],"import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport PostComments from \"./PostComments\";\r\n\r\nclass ViewPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      description: \"\",\r\n      newDescription: \"\",\r\n      post: \"\",\r\n      editing: false,\r\n      comment: \"\",\r\n      numOfComments: 0\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleCommentChange = this.handleCommentChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.dropdownToggle = this.dropdownToggle.bind(this);\r\n    this.loadSelectedPost = this.loadSelectedPost.bind(this);\r\n    this.editPost = this.editPost.bind(this);\r\n    this.deletePost = this.deletePost.bind(this);\r\n    this.saveChanges = this.saveChanges.bind(this);\r\n    this.addCommentToPost = this.addCommentToPost.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      newDescription: event.target.value\r\n    });\r\n  }\r\n  handleCommentChange(event) {\r\n    this.setState({\r\n      comment: event.target.value\r\n    });\r\n  }\r\n\r\n  handleClick() {\r\n    const instance = axios.create({\r\n      baseURL: \"http://localhost:8080/\"\r\n    });\r\n    const { comment } = this.state;\r\n    instance\r\n      .put(\"comment/\" + this.props.postId, comment)\r\n      .then(result => {\r\n        //handle success\r\n        console.log(\"Success it posted \" + result);\r\n      })\r\n      .catch(result => {\r\n        //handle error\r\n        console.log(\"The error is \" + result);\r\n      });\r\n  }\r\n\r\n  getNumOfComments() {\r\n    axios\r\n      .get(\r\n        \"http://localhost:8080/post/num_of_comments_on_post/\" +\r\n          this.state.post._id\r\n      )\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({ numOfComments: res.data > 0 ? res.data : 0 });\r\n      })\r\n      .catch(res => {\r\n        console.log(res);\r\n      });\r\n  }\r\n\r\n  dropdownToggle(event) {\r\n    var dropdown = document.querySelector(\".dropdown\");\r\n    event.stopPropagation();\r\n    dropdown.classList.toggle(\"is-active\");\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.loadSelectedPost();\r\n  }\r\n\r\n  loadSelectedPost() {\r\n    axios\r\n      .get(\"http://localhost:8080/post/\" + this.props.postId)\r\n      .then(res => {\r\n        this.setState({ post: res.data });\r\n        this.setState({ description: this.state.post.description });\r\n      })\r\n      .then(res => {\r\n        this.getNumOfComments();\r\n      });\r\n  }\r\n\r\n  editPost() {\r\n    this.setState({ editing: !this.state.editing });\r\n  }\r\n\r\n  deletePost() {\r\n    axios\r\n      .delete(\"http://localhost:8080/post/\" + this.state.post._id, {\r\n        id: this.state.post._id\r\n      })\r\n      .then(res => {\r\n        console.log(res);\r\n      });\r\n  }\r\n\r\n  saveChanges() {\r\n    axios\r\n      .put(\r\n        \"http://localhost:8080/post/\" + this.props.postId,\r\n        this.state.newDescription\r\n      )\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({\r\n          editing: !this.state.editing,\r\n          description: this.state.newDescription\r\n        });\r\n      });\r\n  }\r\n\r\n  addCommentToPost(event) {\r\n    event.preventDefault();\r\n    axios\r\n      .put(\r\n        \"http://localhost:8080/comment/\" + this.props.postId + \"/comment\",\r\n        this.state.comment\r\n      )\r\n      .then(res => {\r\n        console.log(res);\r\n        this.setState({ post: res.data, comment: \"\" });\r\n        this.getNumOfComments();\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  viewDecider() {\r\n    let view = !this.state.editing ? (\r\n      <div>\r\n        <p>\r\n          {this.state.description}\r\n          <span className=\"tag is-primary\"> Traveling</span>\r\n        </p>\r\n        <span>\r\n          <i className=\"fas fa-comment-alt\" /> {this.state.numOfComments}{\" \"}\r\n          comment -\r\n        </span>\r\n\r\n        <span>\r\n          <i className=\"fas fa-share\" />\r\n          Share\r\n        </span>\r\n        <div className=\"dropdown\">\r\n          <div className=\"dropdown-trigger\">\r\n            <button\r\n              className=\"button is-text is-small\"\r\n              aria-haspopup=\"true\"\r\n              aria-controls=\"dropdown-menu\"\r\n              onClick={this.dropdownToggle}\r\n            >\r\n              <span>...</span>\r\n              <span className=\"icon is-small\">\r\n                <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\r\n              </span>\r\n            </button>\r\n          </div>\r\n          <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\r\n            <div className=\"dropdown-content\">\r\n              <a onClick={this.editPost} className=\"dropdown-item\" href=\"#\">\r\n                Edit Post\r\n              </a>\r\n              <a\r\n                className=\"dropdown-item\"\r\n                onClick={this.deletePost}\r\n                href=\"http://localhost:3000/r\"\r\n              >\r\n                Delete\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <p>comment as dmamprop</p>\r\n        <textarea\r\n          onChange={this.handleCommentChange}\r\n          className=\"textarea\"\r\n          value={this.state.comment}\r\n          placeholder=\"Text (optional)\"\r\n        />\r\n        <div className=\"field is-grouped\">\r\n          <p className=\"control\">\r\n            <a onClick={this.addCommentToPost} className=\"button is-link\">\r\n              Comment\r\n            </a>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    ) : (\r\n      <div>\r\n        <div className=\"control\">\r\n          <textarea\r\n            value={this.state.newDescription}\r\n            className=\"textarea is-focused\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            placeholder={this.state.post.description}\r\n          />\r\n          <div className=\"field is-grouped\">\r\n            <p className=\"control\">\r\n              <a className=\"button is-link\" onClick={this.saveChanges}>\r\n                Save changes\r\n              </a>\r\n            </p>\r\n            <p className=\"control\">\r\n              <a href=\"/r\" className=\"button\" onClick={this.editPost}>\r\n                Cancel\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    return <div>{view}</div>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"content\">\r\n          <h1>{this.state.post.title}</h1>\r\n          {this.viewDecider()}\r\n          <PostComments postProp={this.state.post.comments} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewPost;\r\n","C:\\Source\\ricks-reddit-clone\\client\\web-app\\src\\index.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":14},{"ruleId":"73","severity":1,"message":"77","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":23},{"ruleId":"73","severity":1,"message":"78","line":7,"column":8,"nodeType":"75","messageId":"76","endLine":7,"endColumn":16},{"ruleId":"73","severity":1,"message":"79","line":8,"column":8,"nodeType":"75","messageId":"76","endLine":8,"endColumn":19},{"ruleId":"73","severity":1,"message":"80","line":9,"column":8,"nodeType":"75","messageId":"76","endLine":9,"endColumn":22},{"ruleId":"73","severity":1,"message":"81","line":15,"column":3,"nodeType":"75","messageId":"76","endLine":15,"endColumn":18},{"ruleId":"73","severity":1,"message":"82","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":17},{"ruleId":"73","severity":1,"message":"83","line":4,"column":8,"nodeType":"75","messageId":"76","endLine":4,"endColumn":10},{"ruleId":"73","severity":1,"message":"84","line":5,"column":8,"nodeType":"75","messageId":"76","endLine":5,"endColumn":26},{"ruleId":"85","severity":1,"message":"86","line":171,"column":15,"nodeType":"87","endLine":171,"endColumn":57},{"ruleId":"85","severity":1,"message":"86","line":184,"column":13,"nodeType":"87","endLine":184,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":192,"column":13,"nodeType":"87","endLine":192,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":200,"column":13,"nodeType":"87","endLine":200,"endColumn":16},{"ruleId":"85","severity":1,"message":"86","line":208,"column":13,"nodeType":"87","endLine":208,"endColumn":16},{"ruleId":"73","severity":1,"message":"82","line":2,"column":8,"nodeType":"75","messageId":"76","endLine":2,"endColumn":17},{"ruleId":"88","severity":1,"message":"89","line":64,"column":19,"nodeType":"90","endLine":64,"endColumn":34},{"ruleId":"85","severity":1,"message":"86","line":84,"column":21,"nodeType":"87","endLine":84,"endColumn":24},{"ruleId":"85","severity":1,"message":"86","line":92,"column":21,"nodeType":"87","endLine":92,"endColumn":24},{"ruleId":"73","severity":1,"message":"91","line":4,"column":10,"nodeType":"75","messageId":"76","endLine":4,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":106,"column":25,"nodeType":"87","endLine":109,"endColumn":27},{"ruleId":"73","severity":1,"message":"94","line":3,"column":8,"nodeType":"75","messageId":"76","endLine":3,"endColumn":11},{"ruleId":"92","severity":1,"message":"93","line":75,"column":23,"nodeType":"87","endLine":78,"endColumn":25},{"ruleId":"85","severity":1,"message":"95","line":172,"column":15,"nodeType":"87","endLine":172,"endColumn":77},{"ruleId":"85","severity":1,"message":"86","line":194,"column":13,"nodeType":"87","endLine":194,"endColumn":75},{"ruleId":"85","severity":1,"message":"86","line":212,"column":15,"nodeType":"87","endLine":212,"endColumn":72},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'NavBar' is defined but never used.","Identifier","unusedVar","'CreateSubreddit' is defined but never used.","'ViewPost' is defined but never used.","'PostComment' is defined but never used.","'SubredditPosts' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'PropTypes' is defined but never used.","'qs' is defined but never used.","'callbackFromParent' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'NavLink' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'App' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]